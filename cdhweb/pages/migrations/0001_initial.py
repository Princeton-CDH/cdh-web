# Generated by Django 2.2.19 on 2021-05-03 16:47

import django.db.models.deletion
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.core.models
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtail.search.index
import wagtail.snippets.blocks
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("wagtailimages", "0023_add_choose_permissions"),
        ("taggit", "0003_taggeditem_add_unique_index"),
        ("wagtailcore", "0060_fix_workflow_unique_constraint"),
    ]

    operations = [
        migrations.CreateModel(
            name="ContentPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "description",
                    wagtail.core.fields.RichTextField(
                        blank=True,
                        help_text="Optional. Brief description for preview display. Will also be used for search description (without tags), if one is not entered.",
                    ),
                ),
                (
                    "body",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "svg_image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.documents.blocks.DocumentChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "extended_description",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=["p"],
                                                help_text="This text will only be read to     non-sighted users and should describe the major insights or     takeaways from the graphic. Multiple paragraphs are allowed.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            (
                                "migrated",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                        "image",
                                        "embed",
                                    ],
                                    icon="warning",
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
                (
                    "attachments",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "document",
                                wagtail.documents.blocks.DocumentChooserBlock(),
                            ),
                            (
                                "link",
                                wagtail.snippets.blocks.SnippetChooserBlock(
                                    "cdhpages.ExternalAttachment"
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "body",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "svg_image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.documents.blocks.DocumentChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "extended_description",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=["p"],
                                                help_text="This text will only be read to     non-sighted users and should describe the major insights or     takeaways from the graphic. Multiple paragraphs are allowed.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            (
                                "migrated",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                        "image",
                                        "embed",
                                    ],
                                    icon="warning",
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
                (
                    "attachments",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "document",
                                wagtail.documents.blocks.DocumentChooserBlock(),
                            ),
                            (
                                "link",
                                wagtail.snippets.blocks.SnippetChooserBlock(
                                    "cdhpages.ExternalAttachment"
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Homepage",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="LinkPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "link_url",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link to a custom URL",
                    ),
                ),
                (
                    "url_append",
                    models.CharField(
                        blank=True,
                        help_text="Use this to optionally append a #hash or querystring to the URL.",
                        max_length=255,
                        verbose_name="append to URL",
                    ),
                ),
                (
                    "extra_classes",
                    models.CharField(
                        blank=True,
                        help_text="Optionally specify css classes to be added to this page when it appears in menus.",
                        max_length=100,
                        verbose_name="menu item css classes",
                    ),
                ),
                (
                    "link_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.Page",
                        verbose_name="link to an internal page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="RelatedLinkType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("sort_order", models.PositiveIntegerField(default=0)),
            ],
            options={
                "ordering": ["sort_order"],
            },
        ),
        migrations.CreateModel(
            name="PageIntro",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("paragraph", wagtail.core.fields.RichTextField()),
                (
                    "page",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cdhpages.LinkPage",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LocalAttachment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("file", models.FileField(upload_to="documents", verbose_name="file")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                ("file_size", models.PositiveIntegerField(editable=False, null=True)),
                (
                    "file_hash",
                    models.CharField(blank=True, editable=False, max_length=40),
                ),
                (
                    "author",
                    models.CharField(
                        blank=True,
                        help_text="Citation or list of authors",
                        max_length=255,
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.core.models.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.Collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text=None,
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="tags",
                    ),
                ),
                (
                    "uploaded_by_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="uploaded by user",
                    ),
                ),
            ],
            options={
                "verbose_name": "document",
                "verbose_name_plural": "documents",
                "abstract": False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name="LandingPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "body",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "svg_image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.documents.blocks.DocumentChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "extended_description",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=["p"],
                                                help_text="This text will only be read to     non-sighted users and should describe the major insights or     takeaways from the graphic. Multiple paragraphs are allowed.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            (
                                "migrated",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                        "image",
                                        "embed",
                                    ],
                                    icon="warning",
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
                (
                    "attachments",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "document",
                                wagtail.documents.blocks.DocumentChooserBlock(),
                            ),
                            (
                                "link",
                                wagtail.snippets.blocks.SnippetChooserBlock(
                                    "cdhpages.ExternalAttachment"
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
                ("tagline", models.CharField(max_length=255)),
                (
                    "header_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.Image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ExternalAttachment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField()),
                ("title", models.CharField(max_length=255)),
                (
                    "author",
                    models.CharField(
                        blank=True,
                        help_text="Citation or list of authors",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.core.models.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.Collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
    ]
