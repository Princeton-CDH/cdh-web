# Generated by Django 2.2.17 on 2021-02-11 21:25

from django.contrib.auth.management import create_permissions
from django.db import migrations


def create_projects_permissions(apps, schema_editor):
    """Set Wagtail user group permissions for non-Page Project models.

    By default, Wagtail creates the Moderator and Editor user groups. Users who
    access the wagtail backend (/cms) must be in one of these groups.

    Models that inherit from Wagtail's `Page` will have permissions set up for
    these groups, but Django models that can be managed via Wagtail (through
    the use of `modeladmin`) will not have permissions set up and will not be
    visible in Wagtail unless permissions are manually added.

    For Projects, the relevant models are `GrantType`, `Role` and `Membership`.
    `Grant` and `ProjectRelatedLink` are editable by default as inlines on
    `Project`.
    """

    # ensure that permissions exist for all models in the module; in context of
    # tests they may not yet
    projects_cfg =  apps.get_app_config("projects")
    projects_cfg.models_module = True
    create_permissions(projects_cfg, apps=apps, verbosity=0)
    projects_cfg.models_module = None

    # get models and error if any aren't present - they should be since
    # wagtail's own migrations have already run
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    editors = Group.objects.get(name="Editors")
    moderators = Group.objects.get(name="Moderators")

    # get permissions to assign
    add_granttype = Permission.objects.get(codename="add_granttype")
    change_granttype = Permission.objects.get(codename="change_granttype")
    delete_granttype = Permission.objects.get(codename="delete_granttype")
    view_granttype = Permission.objects.get(codename="view_granttype")
    add_role = Permission.objects.get(codename="add_role")
    change_role = Permission.objects.get(codename="change_role")
    delete_role = Permission.objects.get(codename="delete_role")
    view_role = Permission.objects.get(codename="view_role")
    add_membership = Permission.objects.get(codename="add_membership")
    change_membership = Permission.objects.get(codename="change_membership")
    delete_membership = Permission.objects.get(codename="delete_membership")
    view_membership = Permission.objects.get(codename="view_membership")

    # give moderators all permissions on GrantType, Role, and Membership
    moderators.permissions.add(
        add_granttype, change_granttype, delete_granttype, view_granttype,
        add_role, change_role, delete_role, view_role,
        add_membership, change_membership, delete_membership, view_membership,
    )

    # editors have all permissions on Membership only
    editors.permissions.add(
        add_membership, change_membership, delete_membership, view_membership,
    )


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0023_project_link_page'),
    ]

    operations = [
        migrations.RunPython(create_projects_permissions,
                             reverse_code=migrations.RunPython.noop)
    ]
