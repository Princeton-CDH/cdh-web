# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2020-11-10 17:10
from __future__ import unicode_literals

from django.db import migrations
from django.core.exceptions import ObjectDoesNotExist


def calculate_membership_dates(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    Membership = apps.get_model('projects', 'Membership')
    # sort by project, then user, then grant start date (role?)
    memberships = Membership.objects.all() \
                            .order_by('project', 'user', 'grant__start_date')

    # as we loop through, track current membership to extend across grants
    current = None
    for membership in memberships:
        if current:
            # if this membership matches the previous one, extend it
            if current.user == membership.user and \
               current.project == membership.project and \
               current.role == membership.role:
                # extend the end date
                current.end_date = calculate_membership_end(membership)
                # delete the obsolete membership
                membership.delete()
                continue

            # if it doesn't match, save it
            else:
                current.save()
                current = None

        if not current:
            # if there is no current membership to extend, start a new one
            current = membership
            # set dates based on associated grant & cdh position dates
            current.start_date = calculate_membership_start(membership)
            current.end_date = calculate_membership_end(membership)

    # save the last record after loop ends
    if current:
        current.save()

    # if any memberships are missing start dates, it will be a problem
    assert not Membership.objects.filter(start_date__isnull=True).exists()


def calculate_membership_start(membership):
    '''calculate membership start based on combination of
    associated grant dates and CDH position dates for CDH staff'''
    try:
        # staff should have positions, but handle if not
        if membership.user.profile.is_staff and \
           membership.user.positions.exists():
            # get the first start date for their time at CDH
            cdh_start = membership.user.positions.order_by('start_date')\
                .first().start_date
            return max(cdh_start, membership.grant.start_date)
    except ObjectDoesNotExist:
        # if user has no profile, they can't be cdh staff
        pass
    # otherwise, use grant start date
    return membership.grant.start_date


def calculate_membership_end(membership):
    '''calculate membership end based on combination of
    associated grant dates and CDH position dates for CDH staff'''
    try:
        if membership.user.profile.is_staff and \
           membership.user.positions.exists():
            # get the end date for their most recent position at CDH
            cdh_end = membership.user.positions.order_by('start_date')\
                .last().end_date
            if cdh_end is not None:  # end date is None for current staff
                # if the grant has an end date, compare
                if membership.grant.end_date:
                    return min(cdh_end, membership.grant.end_date)
                # otherwise, use position end date
                return cdh_end
    except ObjectDoesNotExist:
        # if user has no profile, they can't be cdh staff
        pass

    # otherwise, use grant end date
    return membership.grant.end_date


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0010_add_membership_date_range'),
    ]

    operations = [
        migrations.RunPython(calculate_membership_dates,
                             reverse_code=migrations.RunPython.noop)
    ]
