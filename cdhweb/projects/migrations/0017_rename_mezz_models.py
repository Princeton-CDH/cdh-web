# Generated by Django 2.2.17 on 2021-01-14 16:47

import cdhweb.resources.models
from django.db import migrations, models
import django.db.models.deletion
import mezzanine.core.fields
import mezzanine.utils.models
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        ('people', '0021_peoplelandingpage'),
        ('resources', '0008_userresource_to_personresource'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('projects', '0016_project_member_to_person'),
    ]

    operations = [
        migrations.CreateModel(
            name='OldProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keywords_string', models.CharField(blank=True, editable=False, max_length=500)),
                ('title', models.CharField(max_length=500, verbose_name='Title')),
                ('slug', models.CharField(blank=True, help_text='Leave blank to have the URL auto-generated from the title.', max_length=2000, verbose_name='URL')),
                ('_meta_title', models.CharField(blank=True, help_text='Optional title to be used in the HTML title tag. If left blank, the main title field will be used.', max_length=500, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('gen_description', models.BooleanField(default=True, help_text='If checked, the description will be automatically generated from content. Uncheck if you want to manually set a custom description.', verbose_name='Generate description')),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Published')], default=2, help_text='With Draft chosen, will only be shown for admin users on the site.', verbose_name='Status')),
                ('publish_date', models.DateTimeField(blank=True, db_index=True, help_text="With Published chosen, won't be shown until this time", null=True, verbose_name='Published from')),
                ('expiry_date', models.DateTimeField(blank=True, help_text="With Published chosen, won't be shown after this time", null=True, verbose_name='Expires on')),
                ('short_url', models.URLField(blank=True, null=True)),
                ('in_sitemap', models.BooleanField(default=True, verbose_name='Show in sitemap')),
                ('short_description', models.CharField(blank=True, help_text='Brief tagline for display on project card in browse view', max_length=255)),
                ('long_description', mezzanine.core.fields.RichTextField()),
                ('highlight', models.BooleanField(default=False, help_text='Include in randomized project display on the home page.')),
                ('cdh_built', models.BooleanField(default=False, help_text='Project built by CDH Development & Design team.', verbose_name='CDH Built')),
                ('working_group', models.BooleanField(default=False, help_text='Project is a long-term collaborative group associated with the CDH.', verbose_name='Working Group')),
                ('image', mezzanine.core.fields.FileField(blank=True, max_length=255, null=True, verbose_name='Image')),
                ('thumb', mezzanine.core.fields.FileField(blank=True, max_length=255, null=True, verbose_name='Thumbnail')),
                ('attachments', models.ManyToManyField(blank=True, to='resources.Attachment')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=(models.Model, mezzanine.utils.models.AdminThumbMixin, cdhweb.resources.models.ExcerptMixin),
        ),
        migrations.AlterField(
            model_name='oldgrant',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.OldProject'),
        ),
        migrations.AlterField(
            model_name='oldmembership',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.OldProject'),
        ),
        migrations.AlterField(
            model_name='projectresource',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.OldProject'),
        ),
        migrations.RenameModel(
            old_name='Grant',
            new_name='OldGrant',
        ),
        migrations.RenameModel(
            old_name='Membership',
            new_name='OldMembership',
        ),
        migrations.DeleteModel(
            name='Project',
        ),
        migrations.AddField(
            model_name='oldproject',
            name='members',
            field=models.ManyToManyField(through='projects.OldMembership', to='people.Person'),
        ),
        migrations.AddField(
            model_name='oldproject',
            name='resources',
            field=models.ManyToManyField(through='projects.ProjectResource', to='resources.ResourceType'),
        ),
        migrations.AddField(
            model_name='oldproject',
            name='site',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='sites.Site'),
        ),
        migrations.AddField(
            model_name='oldproject',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
