# Generated by Django 2.2.19 on 2021-05-03 16:47

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtail.snippets.blocks
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("people", "0001_initial"),
        ("taggit", "0003_taggeditem_add_unique_index"),
        ("cdhpages", "__first__"),
        ("wagtailcore", "0060_fix_workflow_unique_constraint"),
        ("wagtailimages", "0023_add_choose_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="people.Person"
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogLinkPage",
            fields=[
                (
                    "linkpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="cdhpages.LinkPage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cdhpages.linkpage",),
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "description",
                    wagtail.core.fields.RichTextField(
                        blank=True,
                        help_text="Optional. Brief description for preview display. Will also be used for search description (without tags), if one is not entered.",
                    ),
                ),
                (
                    "body",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                    ]
                                ),
                            ),
                            (
                                "image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "svg_image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.documents.blocks.DocumentChooserBlock(),
                                        ),
                                        (
                                            "alternative_text",
                                            wagtail.core.blocks.TextBlock(
                                                help_text="Alternative text for visually impaired users to\nbriefly communicate the intended message of the image in this context.",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=[
                                                    "bold",
                                                    "italic",
                                                    "link",
                                                    "superscript",
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "extended_description",
                                            wagtail.core.blocks.RichTextBlock(
                                                features=["p"],
                                                help_text="This text will only be read to     non-sighted users and should describe the major insights or     takeaways from the graphic. Multiple paragraphs are allowed.",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            (
                                "migrated",
                                wagtail.core.blocks.RichTextBlock(
                                    features=[
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "blockquote",
                                        "document",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "code",
                                        "image",
                                        "embed",
                                    ],
                                    icon="warning",
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
                (
                    "attachments",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "document",
                                wagtail.documents.blocks.DocumentChooserBlock(),
                            ),
                            (
                                "link",
                                wagtail.snippets.blocks.SnippetChooserBlock(
                                    "cdhpages.ExternalAttachment"
                                ),
                            ),
                        ],
                        blank=True,
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        default=False,
                        help_text="Show the post in the carousel on the homepage.",
                    ),
                ),
                (
                    "featured_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Appears on the homepage carousel when post is featured.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.Image",
                    ),
                ),
                (
                    "people",
                    models.ManyToManyField(
                        related_name="posts", through="blog.Author", to="people.Person"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="BlogPostTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="blog.BlogPost",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_blogposttag_items",
                        to="taggit.Tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="blogpost",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="blog.BlogPostTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="author",
            name="post",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="authors",
                to="blog.BlogPost",
            ),
        ),
    ]
