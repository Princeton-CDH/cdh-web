name: unit tests

on: [push, pull_request]

env:
  NODE_VERSION: 10

jobs:
  python-unit:
    name: Python unit tests
    runs-on: ubuntu-latest
    # We use a service container to avoid needing to set up a local copy of
    # mysql on the test runner instance. This syntax is similar to the spec of
    # a docker-compose file. For more, see:
    # https://docs.github.com/en/free-pro-team@latest/actions/guides/about-service-containers
    services:
      db:
        image: mysql:5.6  # oldest available on docker hub; QA/Prod use 5.5
        env:
          MYSQL_DATABASE: cdhweb
          MYSQL_ROOT_PASSWORD: cdhweb
        ports:
        - 3306:3306
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # We need node to install the JS dependencies used to build static assets.
    # Because some unit tests use Django's test client to visit pages, we need
    # to have JS and styles ready to be loaded on those pages or there will be
    # errors.
    - name: Setup node
      uses: actions/setup-node@v2-beta
      with:
        node-version: ${{ env.NODE_VERSION }}
    # Basing the cache on the hash of the lockfile means that the cache should
    # only ever be invalidated when we update package-lock.json, which happens
    # as part of a release. For more info, see:
    # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          npm-${{ hashFiles('package-lock.json') }}
          npm-
    - name: Install JS dependencies
      run: npm ci
    # Python version to use is stored in the .python-version file, which is the
    # convention for pyenv: https://github.com/pyenv/pyenv
    - name: Get Python version
      run: echo "PYTHON_VERSION=`cat .python-version`" >> $GITHUB_ENV
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    # We base the python cache on the hash of all requirements files, so that
    # if any change, the cache is invalidated.
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          pip-${{ hashFiles('requirements/*.txt') }}
          pip-
    - name: Install dependencies
      run: pip install -r requirements/test.txt
    - name: Setup local_settings.py
      run: |
        cp ci/testsettings.py cdhweb/local_settings.py
        python -c "import uuid; print('SECRET_KEY = \'%s\'' % uuid.uuid4())" >> cdhweb/local_settings.py
    - name: Run pytest
      run: py.test --cov=./ --cov-report=xml
    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v1
