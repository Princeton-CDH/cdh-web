name: unit tests

on:
  push: # run on every push or PR to any branch
  pull_request:
  schedule: # run automatically on main branch each Tuesday at 11am
    - cron: "0 16 * * 2"

env:
  NODE_VERSION: 16
  DB_NAME: cdhweb
  DB_USER: cdhweb
  DB_PASSWORD: cdhweb
  DJANGO_DB_BACKEND: postgresql

jobs:
  python-unit:
    name: Python unit tests
    runs-on: ubuntu-latest
    # We use service containers to avoid needing to set up a local copy of
    # mysql or postgres on the test runner instance. This syntax is similar to
    # the spec of a docker-compose file. For more, see:
    # https://docs.github.com/en/free-pro-team@latest/actions/guides/about-service-containers
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # We need node to install the JS dependencies used to build static assets.
      # Because some unit tests use Django's test client to visit pages, we need
      # to have JS and styles ready to be loaded on those pages or there will be
      # errors.
      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Basing the cache on the hash of the lockfile means that the cache should
      # only ever be invalidated when we update package-lock.json, which happens
      # as part of a release. For more info, see:
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ hashFiles('package-lock.json') }}
            npm-

      - name: Install JS dependencies
        run: npm ci

      # Python version to use is stored in the .python-version file, which is the
      # convention for pyenv: https://github.com/pyenv/pyenv
      - name: Get Python version
        run: echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # We base the python cache on the hash of all requirements files, so that
      # if any change, the cache is invalidated.
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            pip-${{ hashFiles('requirements/*.txt') }}
            pip-

      - name: Install dependencies
        run: pip install -r requirements/test.txt

      - name: Setup local_settings.py
        run: |
          cp ci/testsettings.py cdhweb/local_settings.py
          python -c "import uuid; print('SECRET_KEY = \'%s\'' % uuid.uuid4())" >> cdhweb/local_settings.py

      - name: Build static assets
        run: python manage.py compress

      - name: Run pytest
        run: py.test --cov=./ --cov-config=.coveragerc --cov-report=xml

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v1

      # Set the color of the slack message used in the next step based on the
      # status of the build: "warning" for failure and "good" for success
      - name: Set Slack message color based on build status
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
        run: echo "SLACK_COLOR=$(if [ "$JOB_STATUS" == "success" ]; then echo "good"; else echo "warning"; fi)" >> $GITHUB_ENV

      # Send a message to slack to report the build status. The webhook is stored
      # at the organization level and available to all repositories. Only run on
      # scheduled builds & pushes, since PRs automatically report to Slack.
      - name: Report status to Slack
        uses: rtCamp/action-slack-notify@master
        if: ${{ always() && (github.event_name == 'schedule' || github.event_name == 'push') }}
        continue-on-error: true
        env:
          SLACK_COLOR: ${{ env.SLACK_COLOR }}
          SLACK_WEBHOOK: ${{ secrets.ACTIONS_SLACK_WEBHOOK }}
          SLACK_TITLE: "Workflow `${{ github.workflow }}`: ${{ job.status }}"
          SLACK_MESSAGE: "Run <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}> on <https://github.com/${{ github.repository }}/|${{ github.repository }}@${{ github.ref }}>"
          SLACK_FOOTER: "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|View commit>"
          MSG_MINIMAL: true # use compact slack message format
